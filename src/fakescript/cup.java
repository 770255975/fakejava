
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package fakescript;

import java_cup.runtime.*;
import fakescript.syntree.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\007\000\002\002\004\000\002\016" +
    "\002\000\002\016\003\000\002\016\004\000\002\005\011" +
    "\000\002\005\010\000\002\033\002\000\002\033\005\000" +
    "\002\033\003\000\002\031\003\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\010\000\002\027" +
    "\010\000\002\032\002\000\002\032\005\000\002\032\003" +
    "\000\002\024\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\045\004\000\002" +
    "\041\013\000\002\041\012\000\002\042\015\000\002\042" +
    "\014\000\002\010\007\000\002\010\006\000\002\014\011" +
    "\000\002\014\010\000\002\013\002\000\002\013\004\000" +
    "\002\013\003\000\002\012\006\000\002\012\005\000\002" +
    "\011\002\000\002\011\004\000\002\011\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\004\000\002\015\004\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\017\004" +
    "\000\002\017\003\000\002\021\005\000\002\021\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\034\005\000\002\034\005\000\002\043\005\000\002\043" +
    "\005\000\002\044\005\000\002\044\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\004\000\002\030\004\000\002\030" +
    "\003\000\002\023\003\000\002\023\006\000\002\023\003" +
    "\000\002\023\003\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\003\003\000" +
    "\002\004\003\000\002\051\004\000\002\052\004\000\002" +
    "\053\010\000\002\053\007\000\002\055\003\000\002\055" +
    "\004\000\002\054\006\000\002\054\005\000\002\061\002" +
    "\000\002\061\004\000\002\061\004\000\002\063\002\000" +
    "\002\063\003\000\002\063\004\000\002\062\004\000\002" +
    "\047\002\000\002\047\003\000\002\047\004\000\002\050" +
    "\006\000\002\046\004\000\002\046\003\000\002\064\002" +
    "\000\002\064\003\000\002\064\004\000\002\065\006\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\056\002" +
    "\000\002\056\003\000\002\056\004\000\002\057\005\000" +
    "\002\060\002\000\002\060\003\000\002\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\016\002\uff87\007\uff87\061\uff87\062\006\063" +
    "\uff87\066\uff87\001\002\000\004\002\u0112\001\002\000\014" +
    "\002\uff84\007\uff84\061\uff84\063\012\066\uff84\001\002\000" +
    "\006\020\010\064\007\001\002\000\014\002\uff85\007\uff85" +
    "\061\uff85\063\uff85\066\uff85\001\002\000\014\002\uff86\007" +
    "\uff86\061\uff86\063\uff86\066\uff86\001\002\000\014\002\uff80" +
    "\007\uff80\061\uff80\063\012\066\017\001\002\000\004\017" +
    "\014\001\002\000\014\002\uff83\007\uff83\061\uff83\063\uff83" +
    "\066\uff83\001\002\000\014\002\uff81\007\uff81\061\uff81\063" +
    "\uff81\066\uff81\001\002\000\012\002\uff7f\007\uff7f\061\uff7f" +
    "\066\uff7f\001\002\000\012\002\uff7a\007\uff7a\061\030\066" +
    "\017\001\002\000\004\020\021\001\002\000\014\002\uff82" +
    "\007\uff82\061\uff82\063\uff82\066\uff82\001\002\000\004\020" +
    "\022\001\002\000\006\016\uff7b\020\uff7b\001\002\000\006" +
    "\016\025\020\024\001\002\000\006\016\uff7c\020\uff7c\001" +
    "\002\000\012\002\uff7d\007\uff7d\061\uff7d\066\uff7d\001\002" +
    "\000\010\002\uffff\007\062\061\030\001\002\000\012\002" +
    "\uff7e\007\uff7e\061\uff7e\066\uff7e\001\002\000\004\020\032" +
    "\001\002\000\010\002\uff79\007\uff79\061\uff79\001\002\000" +
    "\004\031\033\001\002\000\024\011\034\012\045\017\041" +
    "\021\036\044\044\056\042\057\037\103\035\105\040\001" +
    "\002\000\154\002\uff75\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\052\uff75\053\uff75\055\uff75\056\uff75\057\uff75\060" +
    "\uff75\061\uff75\064\uff75\065\uff75\071\uff75\072\uff75\073\uff75" +
    "\074\uff75\075\uff75\076\uff75\100\uff75\101\uff75\102\uff75\103" +
    "\uff75\104\uff75\105\uff75\001\002\000\026\011\034\012\045" +
    "\017\041\021\036\044\044\056\042\057\037\103\035\104" +
    "\uff6d\105\040\001\002\000\154\002\uff73\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014" +
    "\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\032\uff73\033" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\052\uff73\053\uff73\055\uff73\056" +
    "\uff73\057\uff73\060\uff73\061\uff73\064\uff73\065\uff73\071\uff73" +
    "\072\uff73\073\uff73\074\uff73\075\uff73\076\uff73\100\uff73\101" +
    "\uff73\102\uff73\103\uff73\104\uff73\105\uff73\001\002\000\026" +
    "\011\034\012\045\017\041\021\036\044\044\056\042\057" +
    "\037\060\uff69\103\035\105\040\001\002\000\154\002\uff76" +
    "\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76" +
    "\021\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\052\uff76\053" +
    "\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\064\uff76" +
    "\065\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076" +
    "\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76" +
    "\001\002\000\154\002\uff71\004\uff71\005\uff71\006\uff71\007" +
    "\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71" +
    "\016\uff71\017\uff71\020\uff71\021\uff71\023\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\052\uff71\053\uff71\055\uff71\056\uff71\057\uff71" +
    "\060\uff71\061\uff71\064\uff71\065\uff71\071\uff71\072\uff71\073" +
    "\uff71\074\uff71\075\uff71\076\uff71\100\uff71\101\uff71\102\uff71" +
    "\103\uff71\104\uff71\105\uff71\001\002\000\154\002\uff72\004" +
    "\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72" +
    "\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\052\uff72\053\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\064\uff72\065" +
    "\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72" +
    "\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105\uff72\001" +
    "\002\000\010\002\uff77\007\uff77\061\uff77\001\002\000\154" +
    "\002\uff70\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011" +
    "\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\uff70\021\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70" +
    "\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\052" +
    "\uff70\053\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70" +
    "\064\uff70\065\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075" +
    "\uff70\076\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70" +
    "\105\uff70\001\002\000\154\002\uff74\004\uff74\005\uff74\006" +
    "\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\023\uff74\024" +
    "\uff74\025\uff74\026\uff74\027\uff74\030\uff74\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\044\uff74\052\uff74\053\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\064\uff74\065\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\104\uff74\105\uff74\001\002\000\026\011" +
    "\034\012\045\017\041\021\036\044\044\056\042\057\037" +
    "\060\050\103\035\105\040\001\002\000\026\011\uff68\012" +
    "\uff68\017\uff68\021\uff68\044\uff68\056\uff68\057\uff68\060\uff68" +
    "\103\uff68\105\uff68\001\002\000\154\002\uff6e\004\uff6e\005" +
    "\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\023" +
    "\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\052\uff6e\053\uff6e\055\uff6e" +
    "\056\uff6e\057\uff6e\060\uff6e\061\uff6e\064\uff6e\065\uff6e\071" +
    "\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\100\uff6e" +
    "\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\001\002\000" +
    "\026\011\uff67\012\uff67\017\uff67\021\uff67\044\uff67\056\uff67" +
    "\057\uff67\060\uff67\103\uff67\105\uff67\001\002\000\026\011" +
    "\uff6c\012\uff6c\017\uff6c\021\uff6c\044\uff6c\056\uff6c\057\uff6c" +
    "\103\uff6c\104\uff6c\105\uff6c\001\002\000\026\011\034\012" +
    "\045\017\041\021\036\044\044\056\042\057\037\103\035" +
    "\104\060\105\040\001\002\000\004\052\055\001\002\000" +
    "\024\011\034\012\045\017\041\021\036\044\044\056\042" +
    "\057\037\103\035\105\040\001\002\000\026\011\uff6a\012" +
    "\uff6a\017\uff6a\021\uff6a\044\uff6a\056\uff6a\057\uff6a\103\uff6a" +
    "\104\uff6a\105\uff6a\001\002\000\026\011\uff6b\012\uff6b\017" +
    "\uff6b\021\uff6b\044\uff6b\056\uff6b\057\uff6b\103\uff6b\104\uff6b" +
    "\105\uff6b\001\002\000\154\002\uff6f\004\uff6f\005\uff6f\006" +
    "\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042" +
    "\uff6f\043\uff6f\044\uff6f\052\uff6f\053\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\060\uff6f\061\uff6f\064\uff6f\065\uff6f\071\uff6f\072" +
    "\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\100\uff6f\101\uff6f" +
    "\102\uff6f\103\uff6f\104\uff6f\105\uff6f\001\002\000\006\002" +
    "\001\007\062\001\002\000\004\020\065\001\002\000\006" +
    "\002\ufffe\007\ufffe\001\002\000\010\002\uff78\007\uff78\061" +
    "\uff78\001\002\000\004\040\066\001\002\000\010\020\070" +
    "\024\ufffa\041\ufffa\001\002\000\006\024\ufff8\041\ufff8\001" +
    "\002\000\006\024\ufff7\041\ufff7\001\002\000\006\024\073" +
    "\041\072\001\002\000\064\004\111\005\116\006\122\010" +
    "\132\011\034\012\045\013\113\016\136\017\041\020\144" +
    "\021\036\040\123\044\044\053\107\055\075\056\042\057" +
    "\037\064\142\065\104\071\103\072\100\073\101\074\127" +
    "\103\035\105\040\001\002\000\004\020\070\001\002\000" +
    "\006\024\ufff9\041\ufff9\001\002\000\010\020\144\064\142" +
    "\065\104\001\002\000\100\004\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\024\uffdf\040\uffdf\044\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\064\uffdf\065\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\100\uffdf\103" +
    "\uffdf\105\uffdf\001\002\000\100\004\uffe2\005\uffe2\006\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\024\uffe2\040\uffe2\044\uffe2" +
    "\053\uffe2\055\uffe2\056\uffe2\057\uffe2\064\uffe2\065\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\100\uffe2" +
    "\103\uffe2\105\uffe2\001\002\000\034\011\034\012\045\017" +
    "\041\020\144\021\036\040\151\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\151\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\100\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\024\uffe5\040\uffe5\044\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\064\uffe5\065\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\076\uffe5\100\uffe5\103\uffe5\105\uffe5" +
    "\001\002\000\100\004\uff90\005\uff90\006\uff90\010\uff90\011" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\024\uff90\040\uff90\044\uff90\053\uff90\055" +
    "\uff90\056\uff90\057\uff90\064\uff90\065\uff90\071\uff90\072\uff90" +
    "\073\uff90\074\uff90\075\uff90\076\uff90\100\uff90\103\uff90\105" +
    "\uff90\001\002\000\164\004\uffa1\005\uffa1\006\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\064\uffa1\065\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1" +
    "\105\uffa1\001\002\000\064\004\111\005\116\006\122\010" +
    "\132\011\034\012\045\013\113\016\u010d\017\041\020\144" +
    "\021\036\040\123\044\044\053\107\055\075\056\042\057" +
    "\037\064\142\065\104\071\103\072\100\073\101\074\127" +
    "\103\035\105\040\001\002\000\100\004\uffe3\005\uffe3\006" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\024\uffe3\040\uffe3\044" +
    "\uffe3\053\uffe3\055\uffe3\056\uffe3\057\uffe3\064\uffe3\065\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\100" +
    "\uffe3\103\uffe3\105\uffe3\001\002\000\062\004\111\005\116" +
    "\006\122\010\132\011\034\012\045\013\113\017\041\020" +
    "\144\021\036\040\123\044\044\053\107\055\075\056\042" +
    "\057\037\064\142\065\104\071\103\072\100\073\101\074" +
    "\127\103\035\105\040\001\002\000\100\004\uffe7\005\uffe7" +
    "\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\024\uffe7\040\uffe7" +
    "\044\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\064\uffe7\065" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7" +
    "\100\uffe7\103\uffe7\105\uffe7\001\002\000\004\020\370\001" +
    "\002\000\100\004\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\024\uffe9\040\uffe9\044\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\064\uffe9\065\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\100\uffe9\103\uffe9\105\uffe9" +
    "\001\002\000\040\011\227\012\231\017\041\020\144\021" +
    "\036\040\225\044\044\056\042\057\037\064\142\065\104" +
    "\067\221\070\224\103\035\105\040\001\002\000\100\004" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\024" +
    "\uffe8\040\uffe8\044\uffe8\053\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\064\uffe8\065\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\100\uffe8\103\uffe8\105\uffe8\001\002\000\010" +
    "\024\uffaf\031\343\077\344\001\002\000\100\004\uffba\005" +
    "\uffba\006\uffba\010\uffba\011\034\012\045\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\041\020\144\021\036\024\uffba\040" +
    "\123\044\044\053\uffba\055\uffba\056\042\057\037\064\142" +
    "\065\104\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\100\uffba\103\035\105\040\001\002\000\100\004\uffe6" +
    "\005\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\024\uffe6" +
    "\040\uffe6\044\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\064" +
    "\uffe6\065\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\100\uffe6\103\uffe6\105\uffe6\001\002\000\142\004" +
    "\uff94\005\uff94\006\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\053\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\064\uff94\065\uff94\071\uff94\072\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\100\uff94\101\uff94\102\uff94" +
    "\103\uff94\105\uff94\001\002\000\100\004\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\024\uffe1\040\uffe1\044" +
    "\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\064\uffe1\065\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\100" +
    "\uffe1\103\uffe1\105\uffe1\001\002\000\100\004\uff91\005\uff91" +
    "\006\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\024\uff91\040\uff91" +
    "\044\uff91\053\uff91\055\uff91\056\uff91\057\uff91\064\uff91\065" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\100\uff91\103\uff91\105\uff91\001\002\000\034\011\034\012" +
    "\045\017\041\020\144\021\036\040\123\044\044\056\042" +
    "\057\037\064\142\065\104\103\035\105\040\001\002\000" +
    "\100\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\024\uffeb\040\uffeb\044\uffeb\053\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\064\uffeb\065\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\100\uffeb\103\uffeb\105\uffeb\001\002" +
    "\000\100\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\024\uffe0\040\uffe0\044\uffe0\053\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\064\uffe0\065\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\100\uffe0\103\uffe0\105\uffe0\001" +
    "\002\000\100\004\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\024\uffdd\040\uffdd\044\uffdd\053\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\064\uffdd\065\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\100\uffdd\103\uffdd\105\uffdd" +
    "\001\002\000\034\011\034\012\045\017\041\020\144\021" +
    "\036\040\123\044\044\056\042\057\037\064\142\065\104" +
    "\103\035\105\040\001\002\000\042\023\uff92\024\uffa4\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uffa4\045\304\046\301" +
    "\047\303\050\306\051\302\052\171\054\305\077\uffa4\102" +
    "\uff92\001\002\000\010\024\267\031\271\077\270\001\002" +
    "\000\040\011\227\012\231\017\041\020\144\021\036\040" +
    "\225\044\044\056\042\057\037\064\142\065\104\067\221" +
    "\070\224\103\035\105\040\001\002\000\140\004\uff9d\005" +
    "\uff9d\006\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff95\024" +
    "\uff9d\025\uff95\026\uff95\027\uff95\030\uff95\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\064\uff9d\065\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff95\103\uff9d\105\uff9d" +
    "\001\002\000\100\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\024\uffe4\040\uffe4\044\uffe4\053\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\064\uffe4\065\uffe4\071\uffe4\072\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\076\uffe4\100\uffe4\103\uffe4\105" +
    "\uffe4\001\002\000\142\004\uff9e\005\uff9e\006\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\023\uff93\024\uff9e\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\204\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\052\205\053\uff9e\055\uff9e\056\uff9e\057\uff9e\064\uff9e\065" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\100\uff9e\101\uff9e\102\uff93\103\uff9e\105\uff9e\001\002\000" +
    "\006\002\ufffb\007\ufffb\001\002\000\100\004\uffea\005\uffea" +
    "\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\024\uffea\040\uffea" +
    "\044\uffea\053\uffea\055\uffea\056\uffea\057\uffea\064\uffea\065" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\100\uffea\103\uffea\105\uffea\001\002\000\016\023\154\025" +
    "\155\026\160\027\161\030\162\102\156\001\002\000\100" +
    "\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\024\uffec\040\uffec\044\uffec\053\uffec\055\uffec\056\uffec\057" +
    "\uffec\064\uffec\065\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\075\uffec\076\uffec\100\uffec\103\uffec\105\uffec\001\002\000" +
    "\164\004\uffa0\005\uffa0\006\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\216\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\064\uffa0\065\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\105\uffa0\001\002" +
    "\000\100\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\024\uffde\040\uffde\044\uffde\053\uffde\055\uffde\056" +
    "\uffde\057\uffde\064\uffde\065\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\100\uffde\103\uffde\105\uffde\001" +
    "\002\000\164\004\uffa3\005\uffa3\006\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\145\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\146\060\uffa3\064\uffa3" +
    "\065\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\105\uffa3" +
    "\001\002\000\040\011\034\012\045\017\041\020\144\021" +
    "\036\024\ufff1\040\151\041\ufff1\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\151\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\144\004\uff93\005\uff93\006\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\204\041\uff93\042\uff93\043\uff93\044\uff93\052\205" +
    "\053\uff93\055\uff93\056\uff93\057\uff93\060\uff93\064\uff93\065" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93" +
    "\100\uff93\101\uff93\102\uff93\103\uff93\105\uff93\001\002\000" +
    "\142\004\uff95\005\uff95\006\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\053\uff95\055\uff95" +
    "\056\uff95\057\uff95\060\uff95\064\uff95\065\uff95\071\uff95\072" +
    "\uff95\073\uff95\074\uff95\075\uff95\076\uff95\100\uff95\101\uff95" +
    "\102\uff95\103\uff95\105\uff95\001\002\000\034\011\034\012" +
    "\045\017\041\020\144\021\036\040\151\044\044\056\042" +
    "\057\037\064\142\065\104\103\035\105\040\001\002\000" +
    "\144\004\uff92\005\uff92\006\uff92\010\uff92\011\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\052\171\053\uff92" +
    "\055\uff92\056\uff92\057\uff92\060\uff92\064\uff92\065\uff92\071" +
    "\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\100\uff92" +
    "\101\uff92\102\uff92\103\uff92\105\uff92\001\002\000\020\023" +
    "\154\025\155\026\160\027\161\030\162\060\157\102\156" +
    "\001\002\000\034\011\034\012\045\017\041\020\144\021" +
    "\036\040\151\044\044\056\042\057\037\064\142\065\104" +
    "\103\035\105\040\001\002\000\034\011\034\012\045\017" +
    "\041\020\144\021\036\040\151\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\151\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\164\004\uffa2\005\uffa2\006\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\064\uffa2" +
    "\065\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\105\uffa2" +
    "\001\002\000\034\011\034\012\045\017\041\020\144\021" +
    "\036\040\151\044\044\056\042\057\037\064\142\065\104" +
    "\103\035\105\040\001\002\000\034\011\034\012\045\017" +
    "\041\020\144\021\036\040\151\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\151\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\142\004\uff99\005\uff99\006\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\053\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\064\uff99\065\uff99\071" +
    "\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\100\uff99" +
    "\101\uff99\102\156\103\uff99\105\uff99\001\002\000\142\004" +
    "\uff98\005\uff98\006\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\053\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\064\uff98\065\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\100\uff98\101\uff98\102\156" +
    "\103\uff98\105\uff98\001\002\000\142\004\uff9a\005\uff9a\006" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023\154\024\uff9a\025" +
    "\uff9a\026\uff9a\027\161\030\162\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\064\uff9a\065\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\100\uff9a\101\uff9a\102\156\103\uff9a\105\uff9a" +
    "\001\002\000\142\004\uff96\005\uff96\006\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\053" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\064\uff96\065\uff96" +
    "\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\100" +
    "\uff96\101\uff96\102\uff96\103\uff96\105\uff96\001\002\000\142" +
    "\004\uff9b\005\uff9b\006\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\023\154\024\uff9b\025\uff9b\026\uff9b\027\161\030\162\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\053\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\064\uff9b\065\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\100\uff9b\101\uff9b\102" +
    "\156\103\uff9b\105\uff9b\001\002\000\142\004\uff97\005\uff97" +
    "\006\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\064\uff97\065\uff97\071\uff97\072\uff97\073\uff97\074\uff97" +
    "\075\uff97\076\uff97\100\uff97\101\uff97\102\156\103\uff97\105" +
    "\uff97\001\002\000\004\020\172\001\002\000\004\040\173" +
    "\001\002\000\040\011\034\012\045\017\041\020\144\021" +
    "\036\024\ufff1\040\151\041\ufff1\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\022\023" +
    "\154\024\uffee\025\155\026\160\027\161\030\162\041\uffee" +
    "\102\156\001\002\000\006\024\uffef\041\uffef\001\002\000" +
    "\006\024\200\041\177\001\002\000\144\004\ufff3\005\ufff3" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\064\ufff3\065\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\100\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\105\ufff3\001\002\000\034\011\034\012\045\017\041" +
    "\020\144\021\036\040\151\044\044\056\042\057\037\064" +
    "\142\065\104\103\035\105\040\001\002\000\006\024\ufff0" +
    "\041\ufff0\001\002\000\020\023\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\041\203\102\uff95\001\002\000\142\004\uff9c" +
    "\005\uff9c\006\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\053\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\064\uff9c\065\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\103" +
    "\uff9c\105\uff9c\001\002\000\040\011\034\012\045\017\041" +
    "\020\144\021\036\024\ufff1\040\151\041\ufff1\044\044\056" +
    "\042\057\037\064\142\065\104\103\035\105\040\001\002" +
    "\000\004\020\206\001\002\000\004\040\207\001\002\000" +
    "\040\011\034\012\045\017\041\020\144\021\036\024\ufff1" +
    "\040\151\041\ufff1\044\044\056\042\057\037\064\142\065" +
    "\104\103\035\105\040\001\002\000\006\024\200\041\211" +
    "\001\002\000\144\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\052" +
    "\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\064\ufff2" +
    "\065\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076" +
    "\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\105\ufff2\001\002" +
    "\000\006\024\200\041\213\001\002\000\144\004\ufff4\005" +
    "\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\064\ufff4\065\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\100\ufff4\101\ufff4\102\ufff4" +
    "\103\ufff4\105\ufff4\001\002\000\006\024\200\041\215\001" +
    "\002\000\144\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\052\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\064\ufff6\065" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\100\ufff6\101\ufff6\102\ufff6\103\ufff6\105\ufff6\001\002\000" +
    "\040\011\034\012\045\017\041\020\144\021\036\024\ufff1" +
    "\040\151\041\ufff1\044\044\056\042\057\037\064\142\065" +
    "\104\103\035\105\040\001\002\000\006\024\200\041\220" +
    "\001\002\000\144\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\052" +
    "\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\064\ufff5" +
    "\065\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\105\ufff5\001\002" +
    "\000\034\011\034\012\045\017\041\020\144\021\036\040" +
    "\123\044\044\056\042\057\037\064\142\065\104\103\035" +
    "\105\040\001\002\000\032\014\uffbc\024\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\075\uffbc\001\002\000\046\014\uffbe\023\uff94\024" +
    "\uffbe\025\uff94\026\uff94\027\uff94\030\uff94\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\075\uffbe\102\uff94\001\002\000\034\011\034\012\045" +
    "\017\041\020\144\021\036\040\123\044\044\056\042\057" +
    "\037\064\142\065\104\103\035\105\040\001\002\000\040" +
    "\011\227\012\231\017\041\020\144\021\036\040\225\044" +
    "\044\056\042\057\037\064\142\065\104\067\221\070\224" +
    "\103\035\105\040\001\002\000\010\014\250\042\247\043" +
    "\251\001\002\000\044\014\uffc2\023\uff75\024\uffc2\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\041\uffc2\042\uffc2\043\uffc2\102\uff75" +
    "\001\002\000\016\032\240\033\237\034\234\035\235\036" +
    "\236\037\233\001\002\000\044\014\uffc1\023\uff74\024\uffc1" +
    "\025\uff74\026\uff74\027\uff74\030\uff74\032\uff74\033\uff74\034" +
    "\uff74\035\uff74\036\uff74\037\uff74\041\uffc1\042\uffc1\043\uffc1" +
    "\102\uff74\001\002\000\050\014\uffbd\023\uff92\024\uffbd\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\052" +
    "\171\075\uffbd\102\uff92\001\002\000\034\011\034\012\045" +
    "\017\041\020\144\021\036\040\123\044\044\056\042\057" +
    "\037\064\142\065\104\103\035\105\040\001\002\000\034" +
    "\011\034\012\045\017\041\020\144\021\036\040\123\044" +
    "\044\056\042\057\037\064\142\065\104\103\035\105\040" +
    "\001\002\000\034\011\034\012\045\017\041\020\144\021" +
    "\036\040\123\044\044\056\042\057\037\064\142\065\104" +
    "\103\035\105\040\001\002\000\034\011\034\012\045\017" +
    "\041\020\144\021\036\040\123\044\044\056\042\057\037" +
    "\064\142\065\104\103\035\105\040\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\123\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\034\011\034\012\045\017\041\020\144\021\036" +
    "\040\123\044\044\056\042\057\037\064\142\065\104\103" +
    "\035\105\040\001\002\000\014\014\uffc7\024\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\001\002\000\014\014\uffc8\024\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\001\002\000\014\014\uffc6\024\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\001\002\000\014\014\uffc4\024" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000\014\014\uffc5" +
    "\024\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000\014\014" +
    "\uffc3\024\uffc3\041\uffc3\042\uffc3\043\uffc3\001\002\000\040" +
    "\011\227\012\231\017\041\020\144\021\036\040\225\044" +
    "\044\056\042\057\037\064\142\065\104\067\221\070\224" +
    "\103\035\105\040\001\002\000\064\004\111\005\116\006" +
    "\122\010\132\011\034\012\045\013\113\016\254\017\041" +
    "\020\144\021\036\040\123\044\044\053\107\055\075\056" +
    "\042\057\037\064\142\065\104\071\103\072\100\073\101" +
    "\074\127\103\035\105\040\001\002\000\040\011\227\012" +
    "\231\017\041\020\144\021\036\040\225\044\044\056\042" +
    "\057\037\064\142\065\104\067\221\070\224\103\035\105" +
    "\040\001\002\000\014\014\uffc9\024\uffc9\041\uffc9\042\247" +
    "\043\251\001\002\000\064\004\111\005\116\006\122\010" +
    "\132\011\034\012\045\013\113\016\255\017\041\020\144" +
    "\021\036\040\123\044\044\053\107\055\075\056\042\057" +
    "\037\064\142\065\104\071\103\072\100\073\101\074\127" +
    "\103\035\105\040\001\002\000\100\004\uffd6\005\uffd6\006" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\024\uffd6\040\uffd6\044" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\064\uffd6\065\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100" +
    "\uffd6\103\uffd6\105\uffd6\001\002\000\100\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\040\uffd7" +
    "\044\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7\064\uffd7\065" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\100\uffd7\103\uffd7\105\uffd7\001\002\000\100\004\uffed\005" +
    "\uffed\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\024\uffed\040" +
    "\uffed\044\uffed\053\uffed\055\uffed\056\uffed\057\uffed\064\uffed" +
    "\065\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\100\uffed\103\uffed\105\uffed\001\002\000\014\014\uffca" +
    "\024\uffca\041\uffca\042\247\043\251\001\002\000\020\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\041\264" +
    "\001\002\000\034\023\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\041\203\102\uff95\001\002\000\010\041\263\042\247\043" +
    "\251\001\002\000\014\014\uffcb\024\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\001\002\000\124\004\uff9f\005\uff9f\006\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\024\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f\064" +
    "\uff9f\065\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\100\uff9f\101\uff9f\103\uff9f\105\uff9f\001\002\000" +
    "\014\014\uffbf\024\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002" +
    "\000\014\014\uffc0\024\uffc0\041\uffc0\042\uffc0\043\uffc0\001" +
    "\002\000\012\004\111\020\300\064\277\065\104\001\002" +
    "\000\010\020\144\064\142\065\104\001\002\000\010\020" +
    "\144\064\142\065\104\001\002\000\004\052\171\001\002" +
    "\000\102\004\uffb2\005\uffb2\006\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\024\uffb2\040\204\044\uffb2\052\205\053\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\064\uffb2\065\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\076\uffb2\100\uffb2\103\uffb2\105" +
    "\uffb2\001\002\000\102\004\uffb1\005\uffb1\006\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\024\uffb1\040\204\044\uffb1\052\205" +
    "\053\uffb1\055\uffb1\056\uffb1\057\uffb1\064\uffb1\065\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1" +
    "\103\uffb1\105\uffb1\001\002\000\010\024\uffb0\031\uffb0\077" +
    "\uffb0\001\002\000\010\024\uffa4\031\uffa4\077\uffa4\001\002" +
    "\000\010\024\uffa0\031\uffa0\077\uffa0\001\002\000\012\024" +
    "\uffa3\031\uffa3\057\146\077\uffa3\001\002\000\034\011\034" +
    "\012\045\017\041\020\144\021\036\040\123\044\044\056" +
    "\042\057\037\064\142\065\104\103\035\105\040\001\002" +
    "\000\034\011\034\012\045\017\041\020\144\021\036\040" +
    "\123\044\044\056\042\057\037\064\142\065\104\103\035" +
    "\105\040\001\002\000\034\011\034\012\045\017\041\020" +
    "\144\021\036\040\123\044\044\056\042\057\037\064\142" +
    "\065\104\103\035\105\040\001\002\000\034\011\034\012" +
    "\045\017\041\020\144\021\036\040\123\044\044\056\042" +
    "\057\037\064\142\065\104\103\035\105\040\001\002\000" +
    "\100\004\uffa6\005\uffa6\006\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\024\uffa6\040\uffa6\044\uffa6\053\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\064\uffa6\065\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\100\uffa6\103\uffa6\105\uffa6\001\002" +
    "\000\034\011\034\012\045\017\041\020\144\021\036\040" +
    "\123\044\044\056\042\057\037\064\142\065\104\103\035" +
    "\105\040\001\002\000\102\004\uffac\005\uffac\006\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\024\uffac\040\uffac\044\uffac\053" +
    "\uffac\055\uffac\056\uffac\057\uffac\064\uffac\065\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\100\uffac\101" +
    "\uffac\103\uffac\105\uffac\001\002\000\116\004\uffae\005\uffae" +
    "\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uff94\024\uffae" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\040\uffae\044\uffae\053" +
    "\uffae\055\uffae\056\uffae\057\uffae\064\uffae\065\uffae\071\uffae" +
    "\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\100\uffae\101" +
    "\uffae\102\uff94\103\uffae\105\uffae\001\002\000\120\004\uffad" +
    "\005\uffad\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uff92" +
    "\024\uffad\025\uff92\026\uff92\027\uff92\030\uff92\040\uffad\044" +
    "\uffad\052\171\053\uffad\055\uffad\056\uffad\057\uffad\064\uffad" +
    "\065\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\100\uffad\101\uffad\102\uff92\103\uffad\105\uffad\001\002" +
    "\000\100\004\uffa8\005\uffa8\006\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\024\uffa8\040\uffa8\044\uffa8\053\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\064\uffa8\065\uffa8\071\uffa8\072\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\100\uffa8\103\uffa8\105\uffa8\001" +
    "\002\000\100\004\uffab\005\uffab\006\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\024\uffab\040\uffab\044\uffab\053\uffab\055\uffab" +
    "\056\uffab\057\uffab\064\uffab\065\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\100\uffab\103\uffab\105\uffab" +
    "\001\002\000\100\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\024\uffa9\040\uffa9\044\uffa9\053\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\064\uffa9\065\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\076\uffa9\100\uffa9\103\uffa9\105" +
    "\uffa9\001\002\000\100\004\uffa7\005\uffa7\006\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\024\uffa7\040\uffa7\044\uffa7\053\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\064\uffa7\065\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\100\uffa7\103\uffa7" +
    "\105\uffa7\001\002\000\100\004\uffaa\005\uffaa\006\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\024\uffaa\040\uffaa\044\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\064\uffaa\065\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\100\uffaa\103" +
    "\uffaa\105\uffaa\001\002\000\004\075\322\001\002\000\006" +
    "\075\uff8b\076\uff8b\001\002\000\006\075\322\076\326\001" +
    "\002\000\034\011\034\012\045\017\041\020\144\021\036" +
    "\040\123\044\044\056\042\057\037\064\142\065\104\103" +
    "\035\105\040\001\002\000\004\014\324\001\002\000\066" +
    "\004\111\005\116\006\122\010\132\011\034\012\045\013" +
    "\113\017\041\020\144\021\036\040\123\044\044\053\107" +
    "\055\075\056\042\057\037\064\142\065\104\071\103\072" +
    "\100\073\101\074\127\075\uff88\076\uff88\103\035\105\040" +
    "\001\002\000\066\004\111\005\116\006\122\010\132\011" +
    "\034\012\045\013\113\017\041\020\144\021\036\040\123" +
    "\044\044\053\107\055\075\056\042\057\037\064\142\065" +
    "\104\071\103\072\100\073\101\074\127\075\uff89\076\uff89" +
    "\103\035\105\040\001\002\000\064\004\111\005\116\006" +
    "\122\010\132\011\034\012\045\013\113\016\331\017\041" +
    "\020\144\021\036\040\123\044\044\053\107\055\075\056" +
    "\042\057\037\064\142\065\104\071\103\072\100\073\101" +
    "\074\127\103\035\105\040\001\002\000\006\075\uff8a\076" +
    "\uff8a\001\002\000\064\004\111\005\116\006\122\010\132" +
    "\011\034\012\045\013\113\016\332\017\041\020\144\021" +
    "\036\040\123\044\044\053\107\055\075\056\042\057\037" +
    "\064\142\065\104\071\103\072\100\073\101\074\127\103" +
    "\035\105\040\001\002\000\100\004\uff8c\005\uff8c\006\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\024\uff8c\040\uff8c\044\uff8c" +
    "\053\uff8c\055\uff8c\056\uff8c\057\uff8c\064\uff8c\065\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\100\uff8c" +
    "\103\uff8c\105\uff8c\001\002\000\100\004\uff8d\005\uff8d\006" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\024\uff8d\040\uff8d\044" +
    "\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\064\uff8d\065\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\100" +
    "\uff8d\103\uff8d\105\uff8d\001\002\000\004\041\264\001\002" +
    "\000\100\004\uffb5\005\uffb5\006\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\024\uffb5\040\uffb5\044\uffb5\053\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\064\uffb5\065\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\100\uffb5\103\uffb5\105\uffb5\001" +
    "\002\000\114\004\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\023\uff94\024\uffb7\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\040\uffb7\044\uffb7\053\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\064\uffb7\065\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\100\uffb7\102\uff94\103\uffb7\105\uffb7\001" +
    "\002\000\116\004\uffb6\005\uffb6\006\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\023\uff92\024\uffb6\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\040\uffb6\044\uffb6\052\171\053\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\064\uffb6\065\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\100\uffb6\102\uff92\103\uffb6\105" +
    "\uffb6\001\002\000\100\004\uffbb\005\uffbb\006\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\024\341\040\uffbb\044\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\064\uffbb\065\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\100\uffbb\103\uffbb" +
    "\105\uffbb\001\002\000\100\004\uffb8\005\uffb8\006\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\024\uffb8\040\uffb8\044\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\064\uffb8\065\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\100\uffb8\103" +
    "\uffb8\105\uffb8\001\002\000\034\011\034\012\045\017\041" +
    "\020\144\021\036\040\123\044\044\056\042\057\037\064" +
    "\142\065\104\103\035\105\040\001\002\000\100\004\uffb9" +
    "\005\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\024\uffb9" +
    "\040\uffb9\044\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\064" +
    "\uffb9\065\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\100\uffb9\103\uffb9\105\uffb9\001\002\000\034\011" +
    "\034\012\045\017\041\020\144\021\036\040\123\044\044" +
    "\056\042\057\037\064\142\065\104\103\035\105\040\001" +
    "\002\000\034\011\034\012\045\017\041\020\144\021\036" +
    "\040\123\044\044\056\042\057\037\064\142\065\104\103" +
    "\035\105\040\001\002\000\100\004\uffb3\005\uffb3\006\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\024\uffb3\040\uffb3\044\uffb3" +
    "\053\uffb3\055\uffb3\056\uffb3\057\uffb3\064\uffb3\065\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3" +
    "\103\uffb3\105\uffb3\001\002\000\100\004\uffb4\005\uffb4\006" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\040\uffb4\044" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\064\uffb4\065\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\100" +
    "\uffb4\103\uffb4\105\uffb4\001\002\000\010\014\350\042\247" +
    "\043\251\001\002\000\070\004\111\005\116\006\122\010" +
    "\132\011\034\012\045\013\113\015\uffd3\016\uffd3\017\041" +
    "\020\144\021\036\040\123\044\044\053\107\055\075\056" +
    "\042\057\037\064\142\065\104\071\103\072\100\073\101" +
    "\074\127\100\353\103\035\105\040\001\002\000\070\004" +
    "\111\005\116\006\122\010\132\011\034\012\045\013\113" +
    "\015\uffd3\016\uffd3\017\041\020\144\021\036\040\123\044" +
    "\044\053\107\055\075\056\042\057\037\064\142\065\104" +
    "\071\103\072\100\073\101\074\127\100\353\103\035\105" +
    "\040\001\002\000\010\015\362\016\uffce\100\353\001\002" +
    "\000\040\011\227\012\231\017\041\020\144\021\036\040" +
    "\225\044\044\056\042\057\037\064\142\065\104\067\221" +
    "\070\224\103\035\105\040\001\002\000\010\015\uffd1\016" +
    "\uffd1\100\uffd1\001\002\000\010\014\356\042\247\043\251" +
    "\001\002\000\070\004\111\005\116\006\122\010\132\011" +
    "\034\012\045\013\113\015\uffcf\016\uffcf\017\041\020\144" +
    "\021\036\040\123\044\044\053\107\055\075\056\042\057" +
    "\037\064\142\065\104\071\103\072\100\073\101\074\127" +
    "\100\uffcf\103\035\105\040\001\002\000\070\004\111\005" +
    "\116\006\122\010\132\011\034\012\045\013\113\015\uffd0" +
    "\016\uffd0\017\041\020\144\021\036\040\123\044\044\053" +
    "\107\055\075\056\042\057\037\064\142\065\104\071\103" +
    "\072\100\073\101\074\127\100\uffd0\103\035\105\040\001" +
    "\002\000\004\016\364\001\002\000\010\015\uffd2\016\uffd2" +
    "\100\uffd2\001\002\000\064\004\111\005\116\006\122\010" +
    "\132\011\034\012\045\013\113\016\uffcc\017\041\020\144" +
    "\021\036\040\123\044\044\053\107\055\075\056\042\057" +
    "\037\064\142\065\104\071\103\072\100\073\101\074\127" +
    "\103\035\105\040\001\002\000\064\004\111\005\116\006" +
    "\122\010\132\011\034\012\045\013\113\016\uffcd\017\041" +
    "\020\144\021\036\040\123\044\044\053\107\055\075\056" +
    "\042\057\037\064\142\065\104\071\103\072\100\073\101" +
    "\074\127\103\035\105\040\001\002\000\100\004\uffd4\005" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4\040" +
    "\uffd4\044\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\064\uffd4" +
    "\065\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\100\uffd4\103\uffd4\105\uffd4\001\002\000\010\015\362" +
    "\016\uffce\100\353\001\002\000\004\016\367\001\002\000" +
    "\100\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\024\uffd5\040\uffd5\044\uffd5\053\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\064\uffd5\065\uffd5\071\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\075\uffd5\076\uffd5\100\uffd5\103\uffd5\105\uffd5\001\002" +
    "\000\010\024\uffa5\031\uffa5\077\uffa5\001\002\000\064\004" +
    "\111\005\116\006\122\010\132\011\034\012\045\013\113" +
    "\017\041\020\144\021\036\024\u0105\040\123\044\044\053" +
    "\107\055\075\056\042\057\037\064\142\065\104\071\103" +
    "\072\100\073\101\074\127\103\035\105\040\001\002\000" +
    "\010\024\uffaf\031\373\077\344\001\002\000\034\011\034" +
    "\012\045\017\041\020\144\021\036\040\123\044\044\056" +
    "\042\057\037\064\142\065\104\103\035\105\040\001\002" +
    "\000\066\004\uffb4\005\uffb4\006\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\040\uffb4" +
    "\044\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\064\uffb4\065" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\101\375\103\uffb4" +
    "\105\uffb4\001\002\000\034\011\034\012\045\017\041\020" +
    "\144\021\036\040\123\044\044\056\042\057\037\064\142" +
    "\065\104\103\035\105\040\001\002\000\004\024\377\001" +
    "\002\000\034\011\034\012\045\017\041\020\144\021\036" +
    "\040\151\044\044\056\042\057\037\064\142\065\104\103" +
    "\035\105\040\001\002\000\020\014\u0101\023\154\025\155" +
    "\026\160\027\161\030\162\102\156\001\002\000\064\004" +
    "\111\005\116\006\122\010\132\011\034\012\045\013\113" +
    "\016\u0103\017\041\020\144\021\036\040\123\044\044\053" +
    "\107\055\075\056\042\057\037\064\142\065\104\071\103" +
    "\072\100\073\101\074\127\103\035\105\040\001\002\000" +
    "\064\004\111\005\116\006\122\010\132\011\034\012\045" +
    "\013\113\016\u0104\017\041\020\144\021\036\040\123\044" +
    "\044\053\107\055\075\056\042\057\037\064\142\065\104" +
    "\071\103\072\100\073\101\074\127\103\035\105\040\001" +
    "\002\000\100\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\024\uffd8\040\uffd8\044\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\064\uffd8\065\uffd8\071\uffd8\072\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8\103\uffd8\105\uffd8" +
    "\001\002\000\100\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\024\uffd9\040\uffd9\044\uffd9\053\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\064\uffd9\065\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\103\uffd9\105" +
    "\uffd9\001\002\000\040\011\227\012\231\017\041\020\144" +
    "\021\036\040\225\044\044\056\042\057\037\064\142\065" +
    "\104\067\221\070\224\103\035\105\040\001\002\000\010" +
    "\024\u0107\042\247\043\251\001\002\000\062\004\111\005" +
    "\116\006\122\010\132\011\034\012\045\013\113\017\041" +
    "\020\144\021\036\040\123\044\044\053\107\055\075\056" +
    "\042\057\037\064\142\065\104\071\103\072\100\073\101" +
    "\074\127\103\035\105\040\001\002\000\064\004\111\005" +
    "\116\006\122\010\132\011\034\012\045\013\113\014\u0109" +
    "\017\041\020\144\021\036\040\123\044\044\053\107\055" +
    "\075\056\042\057\037\064\142\065\104\071\103\072\100" +
    "\073\101\074\127\103\035\105\040\001\002\000\064\004" +
    "\111\005\116\006\122\010\132\011\034\012\045\013\113" +
    "\016\u010b\017\041\020\144\021\036\040\123\044\044\053" +
    "\107\055\075\056\042\057\037\064\142\065\104\071\103" +
    "\072\100\073\101\074\127\103\035\105\040\001\002\000" +
    "\064\004\111\005\116\006\122\010\132\011\034\012\045" +
    "\013\113\016\u010c\017\041\020\144\021\036\040\123\044" +
    "\044\053\107\055\075\056\042\057\037\064\142\065\104" +
    "\071\103\072\100\073\101\074\127\103\035\105\040\001" +
    "\002\000\100\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\024\uffda\040\uffda\044\uffda\053\uffda\055\uffda" +
    "\056\uffda\057\uffda\064\uffda\065\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\100\uffda\103\uffda\105\uffda" +
    "\001\002\000\100\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\024\uffdb\040\uffdb\044\uffdb\053\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\064\uffdb\065\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\100\uffdb\103\uffdb\105" +
    "\uffdb\001\002\000\006\002\ufffc\007\ufffc\001\002\000\114" +
    "\004\uff8f\005\uff8f\006\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\023\154\024\uff8f\025\155\026\160\027\161\030\162\040" +
    "\uff8f\044\uff8f\053\uff8f\055\uff8f\056\uff8f\057\uff8f\064\uff8f" +
    "\065\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076" +
    "\uff8f\100\uff8f\102\156\103\uff8f\105\uff8f\001\002\000\114" +
    "\004\uff8e\005\uff8e\006\uff8e\010\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\023\154\024\uff8e\025\155\026\160\027\161\030\162\040" +
    "\uff8e\044\uff8e\053\uff8e\055\uff8e\056\uff8e\057\uff8e\064\uff8e" +
    "\065\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076" +
    "\uff8e\100\uff8e\102\156\103\uff8e\105\uff8e\001\002\000\102" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\024\uffdc\040\204\044\uffdc\052\205\053\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\064\uffdc\065\uffdc\071\uffdc\072\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\100\uffdc\103\uffdc\105\uffdc\001" +
    "\002\000\006\002\ufffd\007\ufffd\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\002\003\061\004\001\001\000\002\001" +
    "\001\000\006\062\012\063\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\015\050" +
    "\014\062\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\026\064" +
    "\025\065\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\062" +
    "\016\060\065\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\042" +
    "\001\001\000\002\001\001\000\010\022\053\056\052\057" +
    "\051\001\001\000\002\001\001\000\006\022\046\060\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\053" +
    "\057\056\001\001\000\002\001\001\000\004\022\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\066" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\116\004\101\006\104\007\140" +
    "\010\123\014\136\017\111\022\117\023\127\025\133\026" +
    "\132\027\134\030\114\034\113\037\137\040\105\041\076" +
    "\042\120\043\107\044\130\045\124\051\075\052\142\053" +
    "\125\001\001\000\004\031\073\001\001\000\002\001\001" +
    "\000\006\023\271\027\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\117\023\151\026\147\027\146" +
    "\037\u010e\001\001\000\014\022\117\023\151\026\147\027" +
    "\146\037\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\116\004\101\007\255\010" +
    "\123\014\136\017\111\022\117\023\127\025\133\026\132" +
    "\027\134\030\114\034\113\037\137\040\105\041\076\042" +
    "\120\043\107\044\130\045\124\051\075\052\142\053\125" +
    "\001\001\000\002\001\001\000\062\003\116\004\101\006" +
    "\370\007\140\010\123\014\136\017\111\022\117\023\127" +
    "\025\133\026\132\027\134\030\371\034\113\037\137\040" +
    "\105\041\076\042\120\043\107\044\130\045\124\051\075" +
    "\052\142\053\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\346\022\222\023\231" +
    "\025\221\026\132\027\134\035\227\037\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\337\021\336" +
    "\022\334\023\335\025\333\026\132\027\134\037\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\117\023\151\025\332\026" +
    "\260\027\134\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\222\023\231\025" +
    "\221\026\132\027\134\035\316\037\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\225\022\222\023" +
    "\231\025\221\026\132\027\134\035\227\037\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\117\023\151\024\174\026\147\027\146" +
    "\032\213\037\173\001\001\000\014\022\117\023\151\026" +
    "\147\027\146\037\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\117\023\151\026\201\027\146\037" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\117\023\151\026\147\027\146\037\167\001\001\000" +
    "\014\022\117\023\151\026\147\027\146\037\166\001\001" +
    "\000\014\022\117\023\151\026\147\027\146\037\165\001" +
    "\001\000\002\001\001\000\014\022\117\023\151\026\147" +
    "\027\146\037\164\001\001\000\014\022\117\023\151\026" +
    "\147\027\146\037\163\001\001\000\014\022\117\023\151" +
    "\026\147\027\146\037\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\117\023\151\024\174\026\147\027\146" +
    "\032\175\037\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\117" +
    "\023\151\024\200\026\147\027\146\037\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\117\023\151\024\174\026\147\027\146\032\211\037" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\117\023\151\024\174\026\147\027\146\032\207\037" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\117\023\151\024\174\026\147\027\146" +
    "\032\216\037\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\222\023\231\025\221\026\132\027\134" +
    "\035\265\037\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\222\023\231\025\221\026\132\027\134" +
    "\035\264\037\137\001\001\000\022\015\261\022\222\023" +
    "\231\025\257\026\260\027\134\035\227\037\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\222\023\231" +
    "\025\221\026\132\027\134\035\245\037\137\001\001\000" +
    "\020\022\222\023\231\025\221\026\132\027\134\035\244" +
    "\037\137\001\001\000\020\022\222\023\231\025\221\026" +
    "\132\027\134\035\243\037\137\001\001\000\020\022\222" +
    "\023\231\025\221\026\132\027\134\035\242\037\137\001" +
    "\001\000\020\022\222\023\231\025\221\026\132\027\134" +
    "\035\241\037\137\001\001\000\020\022\222\023\231\025" +
    "\221\026\132\027\134\035\240\037\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\256" +
    "\022\222\023\231\025\221\026\132\027\134\035\227\037" +
    "\137\001\001\000\062\003\116\004\101\006\252\007\140" +
    "\010\123\014\136\017\111\022\117\023\127\025\133\026" +
    "\132\027\134\030\114\034\113\037\137\040\105\041\076" +
    "\042\120\043\107\044\130\045\124\051\075\052\142\053" +
    "\125\001\001\000\022\015\251\022\222\023\231\025\221" +
    "\026\132\027\134\035\227\037\137\001\001\000\002\001" +
    "\001\000\060\003\116\004\101\007\255\010\123\014\136" +
    "\017\111\022\117\023\127\025\133\026\132\027\134\030" +
    "\114\034\113\037\137\040\105\041\076\042\120\043\107" +
    "\044\130\045\124\051\075\052\142\053\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\275\030\274\001\001\000" +
    "\006\023\271\027\273\001\001\000\006\023\271\027\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\307\023\310\025\306\026" +
    "\132\027\134\036\315\037\137\001\001\000\020\022\307" +
    "\023\310\025\306\026\132\027\134\036\314\037\137\001" +
    "\001\000\020\022\307\023\310\025\306\026\132\027\134" +
    "\036\313\037\137\001\001\000\020\022\307\023\310\025" +
    "\306\026\132\027\134\036\312\037\137\001\001\000\002" +
    "\001\001\000\020\022\307\023\310\025\306\026\132\027" +
    "\134\036\311\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\317\055\320\001\001\000\002\001\001\000" +
    "\004\054\326\001\001\000\020\022\222\023\231\025\221" +
    "\026\132\027\134\035\322\037\137\001\001\000\002\001" +
    "\001\000\062\003\116\004\101\006\324\007\140\010\123" +
    "\014\136\017\111\022\117\023\127\025\133\026\132\027" +
    "\134\030\114\034\113\037\137\040\105\041\076\042\120" +
    "\043\107\044\130\045\124\051\075\052\142\053\125\001" +
    "\001\000\060\003\116\004\101\007\255\010\123\014\136" +
    "\017\111\022\117\023\127\025\133\026\132\027\134\030" +
    "\114\034\113\037\137\040\105\041\076\042\120\043\107" +
    "\044\130\045\124\051\075\052\142\053\125\001\001\000" +
    "\062\003\116\004\101\006\327\007\140\010\123\014\136" +
    "\017\111\022\117\023\127\025\133\026\132\027\134\030" +
    "\114\034\113\037\137\040\105\041\076\042\120\043\107" +
    "\044\130\045\124\051\075\052\142\053\125\001\001\000" +
    "\002\001\001\000\060\003\116\004\101\007\255\010\123" +
    "\014\136\017\111\022\117\023\127\025\133\026\132\027" +
    "\134\030\114\034\113\037\137\040\105\041\076\042\120" +
    "\043\107\044\130\045\124\051\075\052\142\053\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\341\022\334" +
    "\023\335\025\333\026\132\027\134\037\137\001\001\000" +
    "\002\001\001\000\020\022\307\023\310\025\306\026\132" +
    "\027\134\036\345\037\137\001\001\000\020\022\307\023" +
    "\310\025\306\026\132\027\134\036\344\037\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\116\004\101\006\350\007\140\010\123\012\353" +
    "\013\351\014\136\017\111\022\117\023\127\025\133\026" +
    "\132\027\134\030\114\034\113\037\137\040\105\041\076" +
    "\042\120\043\107\044\130\045\124\051\075\052\142\053" +
    "\125\001\001\000\064\003\116\004\101\007\255\010\123" +
    "\012\353\013\364\014\136\017\111\022\117\023\127\025" +
    "\133\026\132\027\134\030\114\034\113\037\137\040\105" +
    "\041\076\042\120\043\107\044\130\045\124\051\075\052" +
    "\142\053\125\001\001\000\006\011\357\012\360\001\001" +
    "\000\022\015\354\022\222\023\231\025\221\026\132\027" +
    "\134\035\227\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\116\004\101\006\356\007\140\010" +
    "\123\014\136\017\111\022\117\023\127\025\133\026\132" +
    "\027\134\030\114\034\113\037\137\040\105\041\076\042" +
    "\120\043\107\044\130\045\124\051\075\052\142\053\125" +
    "\001\001\000\060\003\116\004\101\007\255\010\123\014" +
    "\136\017\111\022\117\023\127\025\133\026\132\027\134" +
    "\030\114\034\113\037\137\040\105\041\076\042\120\043" +
    "\107\044\130\045\124\051\075\052\142\053\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\116\004" +
    "\101\006\362\007\140\010\123\014\136\017\111\022\117" +
    "\023\127\025\133\026\132\027\134\030\114\034\113\037" +
    "\137\040\105\041\076\042\120\043\107\044\130\045\124" +
    "\051\075\052\142\053\125\001\001\000\060\003\116\004" +
    "\101\007\255\010\123\014\136\017\111\022\117\023\127" +
    "\025\133\026\132\027\134\030\114\034\113\037\137\040" +
    "\105\041\076\042\120\043\107\044\130\045\124\051\075" +
    "\052\142\053\125\001\001\000\002\001\001\000\006\011" +
    "\365\012\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\116\004\101\007\255\010" +
    "\123\014\136\017\111\022\117\023\127\025\133\026\132" +
    "\027\134\030\114\034\113\037\137\040\105\041\076\042" +
    "\120\043\107\044\130\045\124\051\075\052\142\053\125" +
    "\001\001\000\002\001\001\000\020\022\307\023\310\025" +
    "\306\026\132\027\134\036\373\037\137\001\001\000\002" +
    "\001\001\000\020\022\222\023\231\025\221\026\132\027" +
    "\134\035\375\037\137\001\001\000\002\001\001\000\014" +
    "\022\117\023\151\026\147\027\146\037\377\001\001\000" +
    "\002\001\001\000\062\003\116\004\101\006\u0101\007\140" +
    "\010\123\014\136\017\111\022\117\023\127\025\133\026" +
    "\132\027\134\030\114\034\113\037\137\040\105\041\076" +
    "\042\120\043\107\044\130\045\124\051\075\052\142\053" +
    "\125\001\001\000\060\003\116\004\101\007\255\010\123" +
    "\014\136\017\111\022\117\023\127\025\133\026\132\027" +
    "\134\030\114\034\113\037\137\040\105\041\076\042\120" +
    "\043\107\044\130\045\124\051\075\052\142\053\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u0105" +
    "\022\222\023\231\025\221\026\132\027\134\035\227\037" +
    "\137\001\001\000\002\001\001\000\062\003\116\004\101" +
    "\006\u0107\007\140\010\123\014\136\017\111\022\117\023" +
    "\127\025\133\026\132\027\134\030\114\034\113\037\137" +
    "\040\105\041\076\042\120\043\107\044\130\045\124\051" +
    "\075\052\142\053\125\001\001\000\060\003\116\004\101" +
    "\007\255\010\123\014\136\017\111\022\117\023\127\025" +
    "\133\026\132\027\134\030\114\034\113\037\137\040\105" +
    "\041\076\042\120\043\107\044\130\045\124\051\075\052" +
    "\142\053\125\001\001\000\062\003\116\004\101\006\u0109" +
    "\007\140\010\123\014\136\017\111\022\117\023\127\025" +
    "\133\026\132\027\134\030\114\034\113\037\137\040\105" +
    "\041\076\042\120\043\107\044\130\045\124\051\075\052" +
    "\142\053\125\001\001\000\060\003\116\004\101\007\255" +
    "\010\123\014\136\017\111\022\117\023\127\025\133\026" +
    "\132\027\134\030\114\034\113\037\137\040\105\041\076" +
    "\042\120\043\107\044\130\045\124\051\075\052\142\053" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private mycup m_mycup;
  public void set_mycup(mycup mc)
  {
	m_mycup = mc;
  }
  
  public <T> T new_node(Class<? extends syntree_node> c, int lineno) throws Exception
  {
	syntree_node t = c.newInstance();
	t.m_lno = lineno;
	return (T)t;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$cup$actions {
  private final cup parser;

  /** Constructor */
  CUP$cup$actions(cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$cup$do_action_part00000000(
    int                        CUP$cup$act_num,
    java_cup.runtime.lr_parser CUP$cup$parser,
    java.util.Stack            CUP$cup$stack,
    int                        CUP$cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$cup$result;

      /* select the action based on the action number */
      switch (CUP$cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= package_head include_head struct_head const_head body 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-4)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		RESULT = start_val;
              CUP$cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$cup$parser.done_parsing();
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= function_declaration 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body function_declaration 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET block END 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET block END");
		func_desc_node p = new_node(func_desc_node.class, exleft.getLine());
		p.m_funcname = e.toString();
		p.m_arglist = (func_desc_arglist_node)e1;
		p.m_block = (block_node)e2;
		p.m_endline = m_mycup.get_jflex().get_line();
		m_mycup.add_func_desc(p);
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-6)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET END 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET END");
		func_desc_node p = new_node(func_desc_node.class, exleft.getLine());
		p.m_funcname = e.toString();
		p.m_arglist = (func_desc_arglist_node)e1;
		p.m_endline = m_mycup.get_jflex().get_line();
		m_mycup.add_func_desc(p);
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-5)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration_arguments ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_declaration_arguments",25, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_declaration_arguments ::= function_declaration_arguments ARG_SPLITTER arg 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_declaration_arguments ARG_SPLITTER arg ");
		func_desc_arglist_node p = (func_desc_arglist_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_declaration_arguments",25, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_declaration_arguments ::= arg 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: arg");
		func_desc_arglist_node p = new_node(func_desc_arglist_node.class, exleft.getLine());
		p.add_arg((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_declaration_arguments",25, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arg ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER");
		identifier_node p = new_node(identifier_node.class, exleft.getLine());
		p.m_str = e.toString();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("arg",23, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_call ::= IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class, exleft.getLine());
		p.m_fuc = e.toString();
		p.m_arglist = (function_call_arglist_node)e1;
		p.m_fakecall = false;
		p.m_classmem_call = false;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_call ::= IDENTIFIER_DOT OPEN_BRACKET function_call_arguments CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER_DOT OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class, exleft.getLine());
		p.m_fuc = e.toString();
		p.m_arglist = (function_call_arglist_node)e1;
		p.m_fakecall = false;
		p.m_classmem_call = false;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_call ::= function_call OPEN_BRACKET function_call_arguments CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_call OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class, exleft.getLine());
		p.m_prefuc = (syntree_node)e;
		p.m_arglist = (function_call_arglist_node)e1;
		p.m_fakecall = false;
		p.m_classmem_call = false;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_call ::= variable COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class, exleft.getLine());
		p.m_fuc = e1.toString();
		p.m_arglist = (function_call_arglist_node)e2;
		if (p.m_arglist == null)
		{
			p.m_arglist = new_node(function_call_arglist_node.class, exleft.getLine());
		}
		p.m_arglist.add_arg((syntree_node)e);
		p.m_fakecall = false;
		p.m_classmem_call = true;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-5)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_call ::= function_call COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_call COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class, exleft.getLine());
		p.m_fuc = e1.toString();
		p.m_arglist = (function_call_arglist_node)e2;
		if (p.m_arglist == null)
		{
			p.m_arglist = new_node(function_call_arglist_node.class, exleft.getLine());
		}
		p.m_arglist.add_arg((syntree_node)e);
		p.m_fakecall = false;
		p.m_classmem_call = true;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-5)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_call_arguments ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty ");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call_arguments",24, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_call_arguments ::= function_call_arguments ARG_SPLITTER arg_expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_call_arguments ARG_SPLITTER arg_expr ");
		function_call_arglist_node p = (function_call_arglist_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call_arguments",24, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_call_arguments ::= arg_expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: arg_expr ");
		function_call_arglist_node p = new_node(function_call_arglist_node.class, exleft.getLine());
		p.add_arg((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("function_call_arguments",24, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arg_expr ::= expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("arg_expr",18, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= block stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: block stmt ");
		block_node p = (block_node)e;
		p.add_stmt((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block ::= stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: stmt");
		block_node p = new_node(block_node.class, exleft.getLine());
		p.add_stmt((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= while_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: while_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= if_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: if_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= return_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: return_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= assign_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: assign_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= multi_assign_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: multi_assign_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= break 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: break");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= continue 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: continue");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= math_assign_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: math_assign_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= for_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: for_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= for_loop_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: for_loop_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= fake_call_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: fake_call_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= sleep 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: sleep_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= yield 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: yield_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= switch_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: switch_stmt");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fake_call_stmt ::= FAKE function_call 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FAKE function_call");
		function_call_node p = (function_call_node)e;
		p.m_fakecall = true;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("fake_call_stmt",35, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_stmt ::= FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN block END 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-8)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-8)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-8)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-7)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN block END");
		for_stmt p = new_node(for_stmt.class, fxleft.getLine());
		p.m_cmp = (cmp_stmt)e1;
		p.m_beginblock = (block_node)e;
		p.m_endblock = (block_node)e2;
		p.m_block = (block_node)e3;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("for_stmt",31, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-8)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_stmt ::= FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN END 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-7)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-6)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN END");
		for_stmt p = new_node(for_stmt.class, fxleft.getLine());
		p.m_cmp = (cmp_stmt)e1;
		p.m_beginblock = (block_node)e;
		p.m_endblock = (block_node)e2;
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("for_stmt",31, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-7)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_loop_stmt ::= FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN block END 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-10)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-10)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-10)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-9)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-9)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-9)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-7)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-7)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN block END");
		for_loop_stmt p = new_node(for_loop_stmt.class, fxleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_begin = (syntree_node)e1;
		p.m_end = (syntree_node)e2;
		p.m_add = (syntree_node)e3;
		p.m_block = (block_node)e4;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("for_loop_stmt",32, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-10)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // for_loop_stmt ::= FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN END 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-9)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-9)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-9)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-8)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-8)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-8)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN END");
		for_loop_stmt p = new_node(for_loop_stmt.class, fxleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_begin = (syntree_node)e1;
		p.m_end = (syntree_node)e2;
		p.m_add = (syntree_node)e3;
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("for_loop_stmt",32, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-9)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_stmt ::= WHILE cmp THEN block END 
            {
              Object RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: WHILE cmp THEN block END ");
		while_stmt p = new_node(while_stmt.class, wxleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (block_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("while_stmt",6, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-4)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_stmt ::= WHILE cmp THEN END 
            {
              Object RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: WHILE cmp THEN END ");
		while_stmt p = new_node(while_stmt.class, wxleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("while_stmt",6, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_stmt ::= IF cmp THEN block elseif_stmt_list else_stmt END 
            {
              Object RESULT =null;
		Location fixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xleft;
		Location fixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-6)).xright;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-6)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IF cmp THEN block elseif_stmt_list else_stmt END");
		if_stmt p = new_node(if_stmt.class, fixleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (block_node)e1;
		p.m_elseifs = (elseif_stmt_list)e2;
		p.m_elses = (else_stmt)e3;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("if_stmt",10, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-6)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_stmt ::= IF cmp THEN elseif_stmt_list else_stmt END 
            {
              Object RESULT =null;
		Location fixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location fixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IF cmp THEN elseif_stmt_list else_stmt END");
		if_stmt p = new_node(if_stmt.class, fixleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		p.m_elseifs = (elseif_stmt_list)e1;
		p.m_elses = (else_stmt)e2;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("if_stmt",10, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-5)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseif_stmt_list ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty");
		RESULT = null;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("elseif_stmt_list",9, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elseif_stmt_list ::= elseif_stmt_list elseif_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: elseif_stmt_list elseif_stmt");
		elseif_stmt_list p = (elseif_stmt_list)e;
		p.add_stmt((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("elseif_stmt_list",9, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elseif_stmt_list ::= elseif_stmt 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: elseif_stmt");
		elseif_stmt_list p = new_node(elseif_stmt_list.class, exleft.getLine());
		p.add_stmt((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("elseif_stmt_list",9, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elseif_stmt ::= ELSEIF cmp THEN block 
            {
              Object RESULT =null;
		Location eixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location eixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: ELSEIF cmp THEN block");
		elseif_stmt p = new_node(elseif_stmt.class, eixleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("elseif_stmt",8, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elseif_stmt ::= ELSEIF cmp THEN 
            {
              Object RESULT =null;
		Location eixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location eixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: ELSEIF cmp THEN");
		elseif_stmt p = new_node(elseif_stmt.class, eixleft.getLine());
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("elseif_stmt",8, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_stmt ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty");
		RESULT = null;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("else_stmt",7, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_stmt ::= ELSE block 
            {
              Object RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: ELSE block");
		else_stmt p = new_node(else_stmt.class, elxleft.getLine());
		p.m_block = (block_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("else_stmt",7, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_stmt ::= ELSE 
            {
              Object RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: ELSE");
		else_stmt p = new_node(else_stmt.class, elxleft.getLine());
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("else_stmt",7, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cmp ::= OPEN_BRACKET cmp CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: OPEN_BRACKET cmp CLOSE_BRACKET");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cmp ::= cmp AND cmp 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp AND cmp");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "&&";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cmp ::= cmp OR cmp 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp OR cmp");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "||";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cmp ::= cmp_value LESS cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value LESS cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "<";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cmp ::= cmp_value MORE cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value MORE cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = ">";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cmp ::= cmp_value EQUAL cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "==";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cmp ::= cmp_value MORE_OR_EQUAL cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value MORE_OR_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = ">=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cmp ::= cmp_value LESS_OR_EQUAL cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value LESS_OR_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "<=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cmp ::= cmp_value NOT_EQUAL cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: cmp_value NOT_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "!=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cmp ::= FTRUE 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FTRUE");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "true";
		p.m_left = null;
		p.m_right = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cmp ::= FFALSE 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FFALSE");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "false";
		p.m_left = null;
		p.m_right = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cmp ::= IS cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IS cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "is";
		p.m_left = (syntree_node)e;
		p.m_right = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cmp ::= NOT cmp_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: NOT cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class, exleft.getLine());
		p.m_cmp = "not";
		p.m_left = (syntree_node)e;
		p.m_right = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp",11, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cmp_value ::= explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp_value",27, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cmp_value ::= variable 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp_value",27, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cmp_value ::= expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("cmp_value",27, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // return_stmt ::= RETURN return_value_list 
            {
              Object RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: RETURN return_value_list");
		return_stmt p = new_node(return_stmt.class, rxleft.getLine());
		p.m_returnlist = (return_value_list_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: RETURN");
		return_stmt p = new_node(return_stmt.class, rxleft.getLine());
		p.m_returnlist = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // return_value_list ::= return_value_list ARG_SPLITTER return_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: return_value_list ARG_SPLITTER return_value");
		return_value_list_node p = (return_value_list_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_value_list",15, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_value_list ::= return_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: return_value");
		return_value_list_node p = new_node(return_value_list_node.class, exleft.getLine());
		p.add_arg((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_value_list",15, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_value ::= explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_value ::= variable 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return_value ::= expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assign_stmt ::= var ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var ASSIGN assign_value");
		assign_stmt p = new_node(assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = false;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assign_stmt ::= var NEW_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var NEW_ASSIGN assign_value");
		assign_stmt p = new_node(assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = true;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multi_assign_stmt ::= var_list ASSIGN function_call 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var_list ASSIGN function_call");
		multi_assign_stmt p = new_node(multi_assign_stmt.class, exleft.getLine());
		p.m_varlist = (var_list_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = false;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("multi_assign_stmt",33, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // multi_assign_stmt ::= var_list NEW_ASSIGN function_call 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var_list NEW_ASSIGN function_call");
		multi_assign_stmt p = new_node(multi_assign_stmt.class, exleft.getLine());
		p.m_varlist = (var_list_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = true;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("multi_assign_stmt",33, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_list ::= var_list ARG_SPLITTER var 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var_list ARG_SPLITTER var");
		var_list_node p = (var_list_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("var_list",34, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_list ::= var 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: var");
		var_list_node p = new_node(var_list_node.class, exleft.getLine());
		p.add_arg((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("var_list",34, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_value ::= explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("assign_value",28, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_value ::= variable 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("assign_value",28, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_value ::= expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("assign_value",28, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // math_assign_stmt ::= variable PLUS_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable PLUS_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "+=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // math_assign_stmt ::= variable MINUS_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable MINUS_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "-=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // math_assign_stmt ::= variable DIVIDE_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable DIVIDE_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "/=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // math_assign_stmt ::= variable MULTIPLY_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable MULTIPLY_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "*=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // math_assign_stmt ::= variable DIVIDE_MOD_ASSIGN assign_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable DIVIDE_MOD_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "%=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // math_assign_stmt ::= variable INC 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable INC");
		explicit_value_node pp = new_node(explicit_value_node.class, exleft.getLine());
		pp.m_str = "1";
		pp.m_type = explicit_value_type.EVT_NUM;
		
		math_assign_stmt p = new_node(math_assign_stmt.class, exleft.getLine());
		p.m_var = (syntree_node)e;
		p.m_oper = "+=";
		p.m_value = pp;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_assign_stmt",30, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var ::= VAR_BEGIN IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: VAR_BEGIN IDENTIFIER");
		var_node p = new_node(var_node.class, exleft.getLine());
		p.m_str = e.toString();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // var ::= variable 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER");
		variable_node p = new_node(variable_node.class, exleft.getLine());
		p.m_str = e.toString();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= IDENTIFIER OPEN_SQUARE_BRACKET expr_value CLOSE_SQUARE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER OPEN_SQUARE_BRACKET expr_value CLOSE_SQUARE_BRACKET");
		container_get_node p = new_node(container_get_node.class, exleft.getLine());
		p.m_container = e.toString();
		p.m_key = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable ::= IDENTIFIER_POINTER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER_POINTER");
		struct_pointer_node p = new_node(struct_pointer_node.class, exleft.getLine());
		p.m_str = e.toString();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable ::= IDENTIFIER_DOT 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER_DOT");
		variable_node p = new_node(variable_node.class, exleft.getLine());
		p.m_str = e.toString();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: OPEN_BRACKET expr CLOSE_BRACKET");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= function_call 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_call");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= math_expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: math_expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // math_expr ::= OPEN_BRACKET math_expr CLOSE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: OPEN_BRACKET math_expr CLOSE_BRACKET");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // math_expr ::= expr_value PLUS expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value PLUS expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "+";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // math_expr ::= expr_value MINUS expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value MINUS expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "-";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // math_expr ::= expr_value MULTIPLY expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value MULTIPLY expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "*";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // math_expr ::= expr_value DIVIDE expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value DIVIDE expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "/";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // math_expr ::= expr_value DIVIDE_MOD expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value DIVIDE_MOD expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "%";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // math_expr ::= expr_value STRING_CAT expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: expr_value STRING_CAT expr_value");
		math_expr_node p = new_node(math_expr_node.class, exleft.getLine());
		p.m_oper = "..";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("math_expr",20, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_value ::= math_expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: math_expr");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr_value",29, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_value ::= explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr_value",29, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_value ::= function_call 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: function_call");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr_value",29, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_value ::= variable 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: variable");
		RESULT = e;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("expr_value",29, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // break ::= BREAK 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: BREAK");
		break_stmt p = new_node(break_stmt.class, exleft.getLine());
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("break",1, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // continue ::= CONTINUE 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: CONTINUE");
		continue_stmt p = new_node(continue_stmt.class, exleft.getLine());
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("continue",2, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sleep ::= SLEEP expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: SLEEP");
		sleep_stmt p = new_node(sleep_stmt.class, exleft.getLine());
		p.m_time = (syntree_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("sleep",39, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // yield ::= YIELD expr_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: YIELD");
		yield_stmt p = new_node(yield_stmt.class, exleft.getLine());
		p.m_time = (syntree_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("yield",40, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switch_stmt ::= SWITCH cmp_value switch_case_list DEFAULT block END 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-5)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: SWITCH cmp_value switch_case_list DEFAULT block END");
		switch_stmt p = new_node(switch_stmt.class, sxleft.getLine());
		p.m_cmp = (syntree_node)e;
		p.m_caselist = (syntree_node)e1;
		p.m_def = (syntree_node)e2;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_stmt",41, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-5)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // switch_stmt ::= SWITCH cmp_value switch_case_list DEFAULT END 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-4)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: SWITCH cmp_value switch_case_list DEFAULT END");
		switch_stmt p = new_node(switch_stmt.class, sxleft.getLine());
		p.m_cmp = (syntree_node)e;
		p.m_caselist = (syntree_node)e1;
		p.m_def = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_stmt",41, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-4)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // switch_case_list ::= switch_case_define 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: switch_case_define");
		switch_caselist_node p = new_node(switch_caselist_node.class, exleft.getLine());
		p.add_case((syntree_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_case_list",43, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // switch_case_list ::= switch_case_list switch_case_define 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: switch_case_list switch_case_define");
		switch_caselist_node p = (switch_caselist_node)e;
		p.add_case((syntree_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_case_list",43, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // switch_case_define ::= CASE cmp_value THEN block 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: CASE cmp_value THEN block");
		switch_case_node p = new_node(switch_case_node.class, exleft.getLine());
		p.m_cmp = (syntree_node)e;
		p.m_block = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_case_define",42, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_case_define ::= CASE cmp_value THEN 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: CASE cmp_value THEN");
		switch_case_node p = new_node(switch_case_node.class, exleft.getLine());
		p.m_cmp = (syntree_node)e;
		p.m_block = null;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("switch_case_define",42, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // package_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // package_head ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: PACKAGE IDENTIFIER ");
		m_mycup.set_package(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // package_head ::= PACKAGE IDENTIFIER_DOT 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: PACKAGE IDENTIFIER_DOT ");
		m_mycup.set_package(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // include_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // include_head ::= include_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // include_head ::= include_head include_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // include_define ::= INCLUDE STRING_DEFINITION 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: INCLUDE STRING_DEFINITION ");
		m_mycup.add_include(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_define",48, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struct_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // struct_head ::= struct_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struct_head ::= struct_head struct_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // struct_define ::= STRUCT IDENTIFIER struct_mem_declaration END 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: STRUCT IDENTIFIER struct_mem_declaration END ");
		m_mycup.add_struct_desc(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_define",38, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // struct_mem_declaration ::= struct_mem_declaration IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: struct_mem_declaration IDENTIFIER ");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_mem_declaration",36, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // struct_mem_declaration ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: IDENTIFIER ");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_mem_declaration",36, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // const_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // const_head ::= const_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // const_head ::= const_head const_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // const_define ::= FCONST IDENTIFIER ASSIGN explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FCONST IDENTIFIER ASSIGN explicit_value ");
		m_mycup.add_const_desc(e.toString(), (syntree_node)e1);
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_define",51, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // explicit_value ::= NULL 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: NULL ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_type = explicit_value_type.EVT_NULL;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // explicit_value ::= FTRUE 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FTRUE ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_type = explicit_value_type.EVT_TRUE;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // explicit_value ::= FFALSE 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FFALSE ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_type = explicit_value_type.EVT_FALSE;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // explicit_value ::= NUMBER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: NUMBER ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_NUM;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // explicit_value ::= FKUUID 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FKUUID ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_UUID;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // explicit_value ::= STRING_DEFINITION 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: STRING_DEFINITION ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_STR;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // explicit_value ::= FKFLOAT 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: FKFLOAT ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_FLOAT;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // explicit_value ::= OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_type = explicit_value_type.EVT_MAP;
		p.m_v = (const_map_list_value_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // explicit_value ::= OPEN_SQUARE_BRACKET const_array_list_value CLOSE_SQUARE_BRACKET 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: OPEN_BIG_BRACKET const_array_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new_node(explicit_value_node.class, exleft.getLine());
		p.m_type = explicit_value_type.EVT_ARRAY;
		p.m_v = (const_array_list_value_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // const_map_list_value ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty ");
		const_map_list_value_node p = new_node(const_map_list_value_node.class, m_mycup.get_jflex().get_line());
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // const_map_list_value ::= const_map_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: const_map_value ");
		const_map_list_value_node p = new_node(const_map_list_value_node.class, exleft.getLine());
		p.add_ele((const_map_value_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // const_map_list_value ::= const_map_list_value const_map_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: const_map_list_value const_map_value ");
		const_map_list_value_node p = (const_map_list_value_node)e;
		p.add_ele((const_map_value_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // const_map_value ::= explicit_value COLON explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value COLON explicit_value ");
		const_map_value_node p = new_node(const_map_value_node.class, exleft.getLine());
		p.m_k = (syntree_node)e;
		p.m_v = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_value",45, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // const_array_list_value ::= 
            {
              Object RESULT =null;
		
		types.log(m_mycup.get_fake(), "[CUP]: empty ");
		const_array_list_value_node p = new_node(const_array_list_value_node.class, m_mycup.get_jflex().get_line());
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // const_array_list_value ::= explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: explicit_value ");
		const_array_list_value_node p = new_node(const_array_list_value_node.class, exleft.getLine());
		p.add_ele((explicit_value_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // const_array_list_value ::= const_array_list_value explicit_value 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log(m_mycup.get_fake(), "[CUP]: const_array_list_value explicit_value ");
		const_array_list_value_node p = (const_array_list_value_node)e;
		p.add_ele((explicit_value_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$cup$do_action(
    int                        CUP$cup$act_num,
    java_cup.runtime.lr_parser CUP$cup$parser,
    java.util.Stack            CUP$cup$stack,
    int                        CUP$cup$top)
    throws java.lang.Exception
    {
              return CUP$cup$do_action_part00000000(
                               CUP$cup$act_num,
                               CUP$cup$parser,
                               CUP$cup$stack,
                               CUP$cup$top);
    }
}

}
